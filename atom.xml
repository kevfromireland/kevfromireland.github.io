<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Boyle]]></title>
  <link href="http://kevinboyle.ie/atom.xml" rel="self"/>
  <link href="http://kevinboyle.ie/"/>
  <updated>2013-06-01T17:00:22+01:00</updated>
  <id>http://kevinboyle.ie/</id>
  <author>
    <name><![CDATA[Kevin Boyle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chromium Embedded, HTML5 Apps and using MVVM]]></title>
    <link href="http://kevinboyle.ie/blog/2013/06/01/chromium-embedded-html5-apps-and-mvvm/"/>
    <updated>2013-06-01T16:09:00+01:00</updated>
    <id>http://kevinboyle.ie/blog/2013/06/01/chromium-embedded-html5-apps-and-mvvm</id>
    <content type="html"><![CDATA[<p>This is part 3 in my series about building desktop software using web technologies and the Chromium Embedded Framework (CEF). In this post I will explore the code patterns that I have used when building desktop apps using CEF. I have created a sample project that shows this pattern in action which you can grab from <a href="https://github.com/kevfromireland/ChromiumEmbeddedAndMvvm" target="_blank">GitHub</a>.</p>

<h3>What is MVVM?</h3>

<p>A common pattern in building desktop software when using WPF is Model-View-ViewModel (MVVM) where you separate the view layer from the code that drives the behavior of that view. You then use data binding to tie the view and view model together. You can read the nitty-gritty on the pattern on <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel" target="_blank">Wikipedia</a></p>

<h3>MVVM and Chromium Embedded</h3>

<p>Using CEF in your desktop software forces you to decouple your view from the core business logic of your software. The diagram shows how I have written my CEF apps so far:</p>

<p><img class="center" src="http://kevinboyle.ie/images/2013-06-01-standard-cef-mvvm.png"></p>

<p><strong><strong>View</strong></strong>: The view in a CEF app is the DOM, the same as any web page. In the first apps that we built using CEF, we developed using HTML directly, but now we have switched to using Jade as a templating language to build the UI, but you can use the same approach that you normally use to building HTML.</p>

<p><strong><strong>View Model</strong></strong>: The view models are written in JavaScript. We use <a href="http://www.knockoutjs.com" target="_blank">Knockout.js</a> to provide two way data-binding so that when something in our view model changes, the UI is updated and vice versa.</p>

<p><strong><strong>Model</strong></strong>: We write the core of our apps in C# and bind objects that expose services on this model into the CEF frame at runtime. The view models can then call these services to interact with our model. My current product is a Visual Studio plugin, and some of the services we expose to our UI in that product allow our view to interact with the IDE and do things like start builds, open dialogs etc.</p>

<h3>Advantages of the MVVM Pattern</h3>

<p>The decoupling of the View and View Models from the Model mean that you can develop your UI in total isolation of your actual product. We achieve this by mocking out our model and services when we are running in a browser.</p>

<pre>
<code class="prettyprint">
if (typeof ServiceProvidedWhenHostedInCef === 'undefined') {
    ServiceProvidedWhenHostedInCef = {
         SomeServiceFunc = function () {
         }
     }
}
</code>
</pre>


<p><strong><strong>Design Time Data</strong></strong>: Having your view models delegate to the model through service objects means that it is easy to replace them during development. The mocks can then populate your view with mock data that is easy to change as it is changing JSON so there is no compile cycle to go through.</p>

<p><strong><strong>Tooling</strong></strong>: There are hundreds of editors to help you create HTML. You can use Visual Studio if you like to use an IDE, or simply use Sublime if you find you are more productive in something lighter. The feedback loop in your development becomes a tight cycle as you can use Chrome Dev Tools to do live editing. Being able to, at runtime and interactively, change the styles and position of your UI elements is such a time saver. No more recompiling the app just to see if the button looks better 4 pixels to the right.</p>

<p><strong><strong>More Involved Designers</strong></strong>: This one might be more relevant to teams at my company than generallybut CEF allows your designers to start building shippable product. The toughest thing I face when doing UI development is that I have no sense of what looks good, at all. Every time I do UI work I get a nice structure in place and I think it looks good, and then for that final 10% I have to have the team&apos;s designer sitting over my shoulder telling me &apos;Add Whitespace&apos; ,&apos;move that down 10 pixels&apos; and generally torturing me. Don&apos;t get me wrong, I think it works and at the end I can see the difference and I can see that it is better, but I have no idea how to spot all those individual minor tweaks myself. I really want to be able to get the structure in place with some good design time data and then have the usability people do the final 10%. HTML and CSS are accessible enough that you don&apos;t need a software engineering background to make changes.</p>

<h3>Next Time</h3>

<p>Through these first 3 posts, I have given you an introduction to what motivated my investigation into replacing WPF and XAML with HTML5. We have also looked at how to structure your application and a popular pattern and some of the advantages that it brings.</p>

<p>In the next post I will take you through how I have actually built some of the apps that are using CEF and get our hands dirty with some code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is the Chromium Embedded Framework?]]></title>
    <link href="http://kevinboyle.ie/blog/2013/05/16/what-is-chromium-embedded-framework/"/>
    <updated>2013-05-16T21:33:00+01:00</updated>
    <id>http://kevinboyle.ie/blog/2013/05/16/what-is-chromium-embedded-framework</id>
    <content type="html"><![CDATA[<p>In my <a href="http://kevinboyle.ie/blog/2013/05/08/can-html5-replace-wpf/">last post</a> I outlined why I thought HTML5 is a better solution for building UIs than using WPF, however, my day job is building a plugin for Visual Studio forcing me to use WPF. I have been using the Chromium Embedded Framework (CEF) to see if it will allow me to bring the advantages of HTML5 to my application in a way that makes sense for me.</p>

<p>CEF is essentially the open source core of the Chrome web browser, repackaged as a library so you can include it in your own products. It allows you to host Chromium in your Windows, Mac or Linux application and has some very neat features that allow you to easily use HTML5 as the view layer in your application and still use whatever language or platform you want to actually build your application be it .NET,  Cocoa or Python.</p>

<p>Below is the what I have come to think of as the standard architecture of a CEF application. Notice that you don&#8217;t need to include any server component and you are still building traditional desktop software.</p>

<p><img src="http://kevinboyle.ie/images/2013-05-16-what-is-cef-standard-arch.png" title="Standard Architecture of a CEF application" alt="Standard Architecture of a CEF application" /></p>

<p>This architecture allows me to build my view in HTML5 whilst keeping the rest of my product and core business logic in the platform of my choosing, which for my current product is C#.</p>

<p>When I first starting using CEF at work, some people were skeptical. Most people&apos;s experience of building UIs using browser technologies is in front-end web development, and that can definitely be a frustrating experience.</p>

<p>It seems that the most common annoyances when building a web application are brought on by the fact that you don&apos;t know which browser your user is going to be running. This leads to some challenges:</p>

<p><strong><strong>Lowest Common Denominator</strong></strong>: You need to look at what browsers visitors to your site are likely to use and then build the site using the feature-set of that browser. For my team&#8217;s product site (<a href="http://vsnomad.com/">http://vsnomad.com/</a>), I think the oldest browser we realistically need to deal with is IE7 or IE8, but that still means you lose lots of the stuff that is really improving front end development like CSS3 and lightning fast JavaScript.</p>

<p><strong><strong>Browser Incompatibility</strong></strong>: Even when you do choose a common set of features you can rely on, they often have subtle differences and quirks across browser implementations so it definitely isn&apos;t a case of write-once and then expect it to work in every browser.</p>

<p>So, why the hell would you want to inflict this on your development? Ordinarily, people weigh up these frustrations against the fact that you can get your product to anyone on the internet without installs or any hassle.  Well, with CEF, you don&apos;t have to deal with any cross browser nonsense at all as you are shipping the browser so you completely control the environment. This means you know the user will be using a bleeding-edge  browser: the one you shipped to them. This has the nice bonus that you only need to test once.</p>

<p>So there you have it, CEF provides you a way to ensure that your users have a standards compliant, modern browser on their machine and provides you with a platform for building your entire app&#8217;s UI using HTML5.</p>

<p>In the next post, I will look at how I have used the MVVM pattern, which is common in WPF codebases, with CEF.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can HTML5 Replace WPF?]]></title>
    <link href="http://kevinboyle.ie/blog/2013/05/08/can-html5-replace-wpf/"/>
    <updated>2013-05-08T22:51:00+01:00</updated>
    <id>http://kevinboyle.ie/blog/2013/05/08/can-html5-replace-wpf</id>
    <content type="html"><![CDATA[<p>My first draft of this blog post ended up being really critical of Windows Presentation Foundation (WPF) but on reflection I think it is unfair to criticise the technology too much. The technology world has always been fast moving, but since WPF&#8217;s release in 2006 some major changes have happened. The iPhone (2007) and Chrome (2008) were released, challenging Microsoft&#8217;s dominance  over how people interact with computers. WPF has failed to keep up and I think people broadly agree that whilst a competent technology, it has many rough edges and hasn&#8217;t kept pace.</p>

<p>For a project at work, I began looking for alternatives to WPF and when someone suggested HTML5 as a view technology, I made some marking criteria to compare it to WPF.</p>

<h4>Had to have a great developer experience</h4>

<p>Both technologies provide you with a way to declaratively build a UI. However, WPF really only provides you with Visual Studio to use as an editor. Visual Studio is great for working with other programmers but working with designers has always been a struggle. Designers don&#8217;t know XAML and Microsoft&#8217;s vision of designers living in Expression Blend and developers living in Visual Studio didn&#8217;t materialise. However, designers do know HTML and CSS and are comfortable using a text editor of their choice to build up mockups, why can&#8217;t those mockups be turned into real products?</p>

<h4>Actively developed</h4>

<p>WPF has only had Microsoft really get behind it, whereas there are numerous companies backing HTML5, all for their own reasons but pragmatically, it means that the rate of change is greater and the risk of stagnation is quite low.</p>

<h4>Large ecosystem</h4>

<p>HTML5 has a much broader user base than WPF as the Web has more appeal than traditional desktop software. This has meant that there is an active community built up around HTML5 and JavaScript. No more relying on Microsoft to provide the entire solution, now there are multiple components that can be glued together to build your solution. Choose from Knockout, AngularJS, Backbone etc. etc. and use whatever you think best suits your way of working and the problem at hand.</p>

<h4>Skills for the future</h4>

<p>Personally I think that everything is moving to the web. This is pretty much inevitable and it will only be certain kinds of software that will remain in the traditional desktop form that we may be more used to. I am writing this blog post using the Office Web Apps whilst listening to the Spotify Web Player, I think the decision between investing my time learning WPF/XAML versus HTML5 is clear for me.</p>

<p>I have convinced myself that HTML5 is a suitable technology, but my day job project is a plugin for Visual Studio so doing a browser based application was out of the question. Does this mean that I am forced into sticking with WPF for now? In the next blog post I will talk about Chromium Embedded and how it provides a way for those of us writing desktop software to use modern technology.</p>
]]></content>
  </entry>
  
</feed>
